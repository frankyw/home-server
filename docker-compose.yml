version: "3.6"
services:

  adguard-home:
    image: adguard/adguardhome
    container_name: adguard-home
    restart: always
    volumes:
      - ${USERDIR}/docker/adguard:/opt/adguardhome/work
      - ${USERDIR}/docker/adguard:/opt/adguardhome/conf
    ports:
      - "53:53"
      - "53:53/udp"
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguard.rule=Host(`adguard.${DOMAINNAME}`)
      - traefik.http.routers.adguard.entrypoints=http
      - traefik.http.routers.adguard.middlewares=sslredirect
      - traefik.http.routers.adguard-secure.rule=Host(`adguard.${DOMAINNAME}`)
      - traefik.http.routers.adguard-secure.entrypoints=https
      - traefik.http.routers.adguard-secure.tls=true
      - traefik.http.services.adguard.loadbalancer.server.port=80
      - traefik.docker.network=traefik_proxy

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      - PMA_HOST=mariadb
    depends_on:
      - mariadb
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.phpma.rule=Host(`phpma.${DOMAINNAME}`)
      - traefik.http.routers.phpma.entrypoints=http
      - traefik.http.routers.phpma.middlewares=sslredirect
      - traefik.http.routers.phpma-secure.rule=Host(`phpma.${DOMAINNAME}`)
      - traefik.http.routers.phpma-secure.entrypoints=https
      - traefik.http.routers.phpma-secure.tls=true
      - traefik.http.services.phpma.loadbalancer.server.port=80
      - traefik.docker.network=traefik_proxy
      
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.cadvisor.rule=Host(`cadvisor.${DOMAINNAME}`)
      - traefik.http.routers.cadvisor.entrypoints=https
      - traefik.http.routers.cadvisor.tls=true
      - traefik.http.services.cadvisor.loadbalancer.server.port=8080
      - traefik.docker.network=traefik_proxy

  flexget:
    image: wiserain/flexget
    container_name: flexget
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - FG_WEBUI_PASSWD=${FLEXGET_PASSWORD}
      - FG_LOG_LEVEL=info
    volumes:
      - ${USERDIR}/docker/flexget:/config
      - /storage:/storage
    ports:
      - 5050:5050
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.flexget.rule=Host(`flexget.${DOMAINNAME}`)
      - traefik.http.routers.flexget.entrypoints=http
      - traefik.http.routers.flexget.middlewares=sslredirect
      - traefik.http.routers.flexget-secure.rule=Host(`flexget.${DOMAINNAME}`)
      - traefik.http.routers.flexget-secure.entrypoints=https
      - traefik.http.routers.flexget-secure.tls=true
      - traefik.http.services.flexget.loadbalancer.server.port=5050
      - traefik.docker.network=traefik_proxy
      
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/transmission-web-control/
    volumes:
      - ${USERDIR}/docker/transmission:/config
      - ${USERDIR}/TransmissionDL:/downloads
    ports:
      - 55700:55700
      - 9091:9091
      - 55700:55700/udp
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAINNAME}`)
      - traefik.http.routers.transmission.entrypoints=http
      - traefik.http.routers.transmission.middlewares=sslredirect
      - traefik.http.routers.transmission-secure.rule=Host(`transmission.${DOMAINNAME}`)
      - traefik.http.routers.transmission-secure.entrypoints=https
      - traefik.http.routers.transmission-secure.tls=true
      - traefik.http.services.transmission.loadbalancer.server.port=9091
      - traefik.docker.network=traefik_proxy

  filebot-node:
    image: rednoah/filebot:node
    container_name: filebot-node
    restart: always
    volumes:
      - ${USERDIR}/docker/filebot:/data
      - ${USERDIR}/TransmissionDL:/downloads
      - /storage:/storage
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.filebot.rule=Host(`filebot.${DOMAINNAME}`)
      - traefik.http.routers.filebot.entrypoints=https
      - traefik.http.routers.filebot.tls=true
      - traefik.http.services.filebot.loadbalancer.server.port=5452
      - traefik.docker.network=traefik_proxy

  portainer:
    image: portainer/portainer:1.21.0
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)
      - traefik.http.routers.portainer.entrypoints=http
      - traefik.http.routers.portainer.middlewares=sslredirect
      - traefik.http.routers.portainer-secure.rule=Host(`portainer.${DOMAINNAME}`)
      - traefik.http.routers.portainer-secure.entrypoints=https
      - traefik.http.routers.portainer-secure.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.docker.network=traefik_proxy

  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup

  unifi-controller:
    image: linuxserver/unifi-controller
    container_name: unifi-controller
    restart: always
    volumes:
      - ${USERDIR}/docker/unifi:/config
      - ${USERDIR}/docker/shared:/shared
    ports:
      - target: 3478
        published: 3478
        protocol: udp
        mode: host
      - target: 10001
        published: 10001
        protocol: udp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 8081
        published: 8081
        protocol: tcp
        mode: host
      - target: 8443
        published: 8443
        protocol: tcp
        mode: host
      - target: 8880
        published: 8880
        protocol: tcp
        mode: host
      - target: 6789
        published: 6789
        protocol: tcp
        mode: host
    networks:
      - traefik_proxy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.unifi.rule=Host(`unifi.${DOMAINNAME}`)
      - traefik.http.routers.unifi.entrypoints=https
      - traefik.http.routers.unifi.tls=true
      - "traefik.docker.network=traefik_proxy"
      - traefik.http.services.unifi.loadbalancer.server.port=8443

  traefik:
    hostname: traefik
    image: traefik:latest
    container_name: traefik
    restart: always
    domainname: ${DOMAINNAME}
    networks:
      - default
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "8000:8080"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik.entrypoints=http
      - traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik-secure.entrypoints=https
      - traefik.http.routers.traefik-secure.tls=true
      - traefik.http.routers.traefik-secure.middlewares=auth
      - traefik.http.routers.traefik-secure.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.sslredirect.redirectscheme.scheme=https
      - traefik.http.middlewares.auth.basicauth.users=${HTTP_USERNAME}:${HTTP_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/docker/traefik:/etc/traefik
      - ${USERDIR}/docker/shared:/shared

  emby:
    container_name: emby
    restart: always
    image: emby/embyserver:beta
    volumes:
      - ${USERDIR}/docker/emby:/config
      - /storage:/storage
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8096:8096/tcp"
    environment:
      - UID=${PUID}
      - GID=${PGID}
      - TZ=${TZ}
      - GIDLIST=${PGID},44
    devices:
      - "/dev/dri/renderD128:/dev/dri/renderD128" 
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.emby.rule=Host(`media.${DOMAINNAME}`)
      - traefik.http.routers.emby.entrypoints=https
      - traefik.http.routers.emby.tls=true
      - traefik.http.services.emby.loadbalancer.server.port=8096
      - traefik.docker.network=traefik_proxy

  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/mariadb:/config
    networks:
      - default

  nginx-frank:
    image: linuxserver/nginx
    container_name: nginx-frank
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/frankw:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.frank.rule=Host(`${DOMAINNAME}`)
      - traefik.http.routers.frank.entrypoints=http
      - traefik.http.routers.frank.middlewares=sslredirect
      - traefik.http.routers.frank-secure.rule=Host(`${DOMAINNAME}`)
      - traefik.http.routers.frank-secure.entrypoints=https
      - traefik.http.routers.frank-secure.tls=true
      - traefik.docker.network=traefik_proxy

  nginx-thcuk:
    image: linuxserver/nginx
    container_name: nginx-thcuk
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/thc:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.thcuk.rule=Host(`${THCDOMAINNAME}`)
      - traefik.http.routers.thcuk.entrypoints=http
      - traefik.http.routers.thcuk.middlewares=sslredirect
      - traefik.http.routers.thcuk-secure.rule=Host(`${THCDOMAINNAME}`)
      - traefik.http.routers.thcuk-secure.entrypoints=https
      - traefik.http.routers.thcuk-secure.tls=true
      - traefik.docker.network=traefik_proxy

  nginx-ls-dev:
    image: linuxserver/nginx
    container_name: nginx-ls-dev
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/ls:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.ls-dev.rule=Host(`dev.${LSDOMAINNAME}`)
      - traefik.http.routers.ls-dev.entrypoints=http
      - traefik.http.routers.ls-dev.middlewares=sslredirect
      - traefik.http.routers.ls-dev-secure.rule=Host(`dev.${LSDOMAINNAME}`)
      - traefik.http.routers.ls-dev-secure.entrypoints=https
      - traefik.http.routers.ls-dev-secure.tls=true
      - traefik.docker.network=traefik_proxy

  nginx-ls-temp:
    image: linuxserver/nginx
    container_name: nginx-ls-temp
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/ls-temp:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.ls-temp.rule=Host(`${LSDOMAINNAME}`)
      - traefik.http.routers.ls-temp.entrypoints=http
      - traefik.http.routers.ls-temp.middlewares=sslredirect
      - traefik.http.routers.ls-temp-secure.rule=Host(`${LSDOMAINNAME}`)
      - traefik.http.routers.ls-temp-secure.entrypoints=https
      - traefik.http.routers.ls-temp-secure.tls=true
      - traefik.docker.network=traefik_proxy

  deluge:
    image: linuxserver/deluge:5b398f77-ls22
    restart: unless-stopped
    container_name: deluge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/deluge:/config
      - ${USERDIR}/Deluge:/downloads
    ports:
      - "54700:54700"
      - "54700:54700/udp"
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.routers.deluge.rule=Host(`deluge.${DOMAINNAME}`)
      - traefik.http.routers.deluge.entrypoints=http
      - traefik.http.routers.deluge.middlewares=sslredirect
      - traefik.http.routers.deluge-secure.rule=Host(`deluge.${DOMAINNAME}`)
      - traefik.http.routers.deluge-secure.entrypoints=https
      - traefik.http.routers.deluge-secure.tls=true
      - traefik.http.services.deluge.loadbalancer.server.port=8112
      - traefik.docker.network=traefik_proxy

networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
