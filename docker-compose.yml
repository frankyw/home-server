version: "3.8"

services:

  traefik:
    hostname: traefik
    image: traefik:latest
    container_name: traefik
    restart: always
    domainname: ${DOMAINNAME}
    networks:
      - traefik_proxy
    ports:
      - 80:80
      - 443:443
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    command:
      - --api
      - --log.level=INFO
      - --global.sendAnonymousUsage=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.options=default
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      - --certificatesresolvers.cloudflare.acme.email=${FW_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.delayBeforeCheck=90
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls=true
      # - traefik.http.routers.traefik.tls.certresolver=cloudflare
      - traefik.http.routers.traefik.tls.options=default
      - traefik.http.routers.traefik.middlewares=auth,securityheaders
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.domains[0].main=${DOMAINNAME}
      - traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAINNAME}
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.users=${HTTP_USERNAME}:${HTTP_PASSWORD},${M_USER}:${M_PASSWORD}
      - traefik.http.middlewares.sslredirect.redirectscheme.scheme=https
      - traefik.http.middlewares.securityheaders.headers.forceSTSHeader=true
      - traefik.http.middlewares.securityheaders.headers.stsPreload=true
      - traefik.http.middlewares.securityheaders.headers.stsSeconds=315360000
      - traefik.http.middlewares.securityheaders.headers.stsIncludeSubdomains=true
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=sslredirect
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/docker/shared:/shared
      - $USERDIR/docker/traefik/acme/acme.json:/acme.json
      - $USERDIR/docker/traefik/rules:/rules 

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.options=default
      - traefik.http.routers.portainer.middlewares=securityheaders
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.docker.network=traefik_proxy

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.cadvisor.rule=Host(`cadvisor.${DOMAINNAME}`)
      - traefik.http.routers.cadvisor.entrypoints=https
      - traefik.http.routers.cadvisor.tls=true
      - traefik.http.routers.cadvisor.tls.options=default
      - traefik.http.routers.cadvisor.middlewares=auth,securityheaders
      - traefik.http.services.cadvisor.loadbalancer.server.port=8080
      - traefik.docker.network=traefik_proxy

  unifi-controller:
    image: linuxserver/unifi-controller
    container_name: unifi-controller
    restart: always
    volumes:
      - ${USERDIR}/docker/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8081:8081
      - 8443:8443
      - 8843:8843
      - 8880:8880
      - 6789:6789
    networks:
      traefik_proxy:
      fw_macvlan:
        ipv4_address: ${STATICIP_UNIFI}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.http.routers.unifi.rule=Host(`unifi.${DOMAINNAME}`)
      - traefik.http.routers.unifi.entrypoints=https
      - traefik.http.routers.unifi.tls=true
      - traefik.http.routers.unifi.tls.options=default
      - traefik.http.routers.unifi.middlewares=securityheaders
      - traefik.http.services.unifi.loadbalancer.server.port=8443
      - traefik.http.services.unifi.loadbalancer.server.scheme=https
      - traefik.docker.network=traefik_proxy

  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/mariadb:/config
    networks:
      - traefik_proxy

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      - PMA_HOST=mariadb
    depends_on:
      - mariadb
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.phpma.rule=Host(`phpma.${DOMAINNAME}`)
      - traefik.http.routers.phpma.entrypoints=https
      - traefik.http.routers.phpma.tls=true
      - traefik.http.routers.phpma.tls.options=default
      - traefik.http.routers.phpma.middlewares=securityheaders
      - traefik.http.services.phpma.loadbalancer.server.port=80
      - traefik.docker.network=traefik_proxy

  nginx-frank:
    image: linuxserver/nginx
    container_name: nginx-frank
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/frankw:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.frank.rule=Host(`${DOMAINNAME}`)
      - traefik.http.routers.frank.entrypoints=https
      - traefik.http.routers.frank.tls=true
      - traefik.http.routers.frank.tls.options=default
      - traefik.http.routers.frank.middlewares=securityheaders
      - traefik.docker.network=traefik_proxy

  nginx-cb:
    image: linuxserver/nginx
    container_name: nginx-cb
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/nginx/cb:/config
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.nginx-cb.rule=HostRegexp(`{subdomain:[a-z\d_-]+}.${CBDOMAINNAME}`, `${CBDOMAINNAME}`)
      - traefik.http.routers.nginx-cb.entrypoints=https
      - traefik.http.routers.nginx-cb.tls=true
      - traefik.http.routers.nginx-cb.tls.options=default
      - traefik.http.routers.nginx-cb.tls.certresolver=cloudflare
      - traefik.http.routers.nginx-cb.tls.domains[0].main=${CBDOMAINNAME}
      - traefik.http.routers.nginx-cb.tls.domains[0].sans=*.${CBDOMAINNAME}
      - traefik.http.routers.nginx-cb.middlewares=securityheaders
      - traefik.docker.network=traefik_proxy

  browserless-chrome:
    image: browserless/chrome
    container_name: browserless-chrome
    restart: unless-stopped
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.browserless-chrome.rule=Host(`chrome.${DOMAINNAME}`)
      - traefik.http.routers.browserless-chrome.entrypoints=https
      - traefik.http.routers.browserless-chrome.tls=true
      - traefik.http.routers.browserless-chrome.tls.options=default
      - traefik.http.routers.browserless-chrome.middlewares=auth,securityheaders
      - traefik.http.services.browserless-chrome.loadbalancer.server.port=3000
      - traefik.docker.network=traefik_proxy

  flexget:
    image: wiserain/flexget
    container_name: flexget
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - FG_WEBUI_PASSWD=${FLEXGET_PASSWORD}
      - FG_LOG_LEVEL=INFO
    volumes:
      - ${USERDIR}/docker/flexget:/config
      - /video:/video
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.flexget.rule=Host(`flexget.${DOMAINNAME}`)
      - traefik.http.routers.flexget.entrypoints=https
      - traefik.http.routers.flexget.tls=true
      - traefik.http.routers.flexget.tls.options=default
      - traefik.http.routers.flexget.middlewares=securityheaders
      - traefik.http.services.flexget.loadbalancer.server.port=5050
      - traefik.docker.network=traefik_proxy

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/config/transmission-web-control-1.6.1-update1/src
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASS}
      - PEERPORT=55016
    volumes:
      - ${USERDIR}/docker/transmission:/config
      - /TransmissionDL:/downloads
    ports:
      - 55016:55016
      - 9091:9091
      - 55016:55016/udp
    restart: unless-stopped
    networks:
      traefik_proxy:
      fw_macvlan:
        ipv4_address: ${STATICIP_TRANSMISSION}
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAINNAME}`)
      - traefik.http.routers.transmission.entrypoints=https
      - traefik.http.routers.transmission.tls=true
      - traefik.http.routers.transmission.tls.options=default
      - traefik.http.routers.transmission.middlewares=securityheaders
      - traefik.http.services.transmission.loadbalancer.server.port=9091
      - traefik.docker.network=traefik_proxy

  filebot-node:
    image: rednoah/filebot:node
    container_name: filebot-node
    restart: always
    volumes:
      - ${USERDIR}/docker/filebot:/data
      - /TransmissionDL:/downloads
      - /video:/video
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.filebot.rule=Host(`filebot.${DOMAINNAME}`)
      - traefik.http.routers.filebot.entrypoints=https
      - traefik.http.routers.filebot.tls=true
      - traefik.http.routers.filebot.tls.options=default
      - traefik.http.routers.filebot.middlewares=auth,securityheaders
      - traefik.http.services.filebot.loadbalancer.server.port=5452
      - traefik.docker.network=traefik_proxy

  deluge:
    image: linuxserver/deluge:2.0.5
    restart: unless-stopped
    container_name: deluge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/deluge:/config
      - /downloads/Deluge:/downloads
    ports:
      - "54700:54700"
      - "54700:54700/udp"
    networks:
      traefik_proxy:
      fw_macvlan:
        ipv4_address: ${STATICIP_DELUGE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.deluge.rule=Host(`deluge.${DOMAINNAME}`)
      - traefik.http.routers.deluge.entrypoints=https
      - traefik.http.routers.deluge.tls=true
      - traefik.http.routers.deluge.tls.options=default
      - traefik.http.routers.deluge.middlewares=securityheaders
      - traefik.http.services.deluge.loadbalancer.server.port=8112
      - traefik.docker.network=traefik_proxy

  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/duplicati:/config
      - ${USERDIR}:/source
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.${DOMAINNAME}`)
      - traefik.http.routers.duplicati.entrypoints=https
      - traefik.http.routers.duplicati.tls=true
      - traefik.http.routers.duplicati.tls.options=default
      - traefik.http.routers.duplicati.middlewares=auth,securityheaders
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
      - traefik.docker.network=traefik_proxy

  timemachine:
    image: mbentley/timemachine:smb
    container_name: timemachine
    restart: unless-stopped
    hostname: timemachine
    environment:
      - TM_UID=${PUID}
      - TM_GID=${PGID}
      - TM_USERNAME=timemachine
      - PASSWORD=timemachine
      - VOLUME_SIZE_LIMIT="500 G"
    volumes:
      - /downloads/timemachine:/opt/timemachine
    networks:
      fw_macvlan:
        ipv4_address: ${STATICIP_TIMEMACHINE}

  cloudflare-ddns:
    container_name: cloudflare-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CF_DDNS_TOKEN}
      - ZONE=${DOMAINNAME}
      - PROXIED=true
      - DNS_SERVER=1.1.1.1
    networks:
      - traefik_proxy

  watchtower:
    container_name: watchtower
    restart: always
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup
    networks:
      - traefik_proxy

  homebridge:
    image: oznu/homebridge:latest
    restart: always
    container_name: homebridge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8000
    volumes:
      - ${USERDIR}/docker/homebridge:/homebridge
    networks:
      fw_macvlan:
        ipv4_address: ${STATICIP_HOMEBRIDGE}

networks:
  traefik_proxy:
    name: traefik_proxy
    external: true
  fw_macvlan:
    name: fw_macvlan
    external: true